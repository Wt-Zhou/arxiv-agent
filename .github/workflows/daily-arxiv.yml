name: Daily ArXiv Paper Analysis

on:
  # 每天UTC时间 00:00 运行（北京时间 08:00）
  schedule:
    - cron: '0 0 * * *'

  # 允许手动触发
  workflow_dispatch:
    inputs:
      days_back:
        description: '搜索最近几天的论文'
        required: false
        default: '1'
      max_concurrent:
        description: '最大并发请求数'
        required: false
        default: '5'
      min_relevance:
        description: '最小相关性级别 (high/medium/low)'
        required: false
        default: 'medium'

jobs:
  analyze-papers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update && sudo apt-get install -y gettext-base

    - name: Install Chrome and ChromeDriver for Twitter scraping
      run: |
        # 安装Chrome浏览器
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        # ChromeDriver会由webdriver-manager自动管理

    - name: Create config from template
      run: |
        # 从环境变量创建配置文件
        cat > config.yaml << 'CONFIGEOF'
        # ============================================================
        # ArXiv Agent 配置文件 (GitHub Actions)
        # ============================================================

        # ============================================================
        # 1. 研究方向配置
        # ============================================================
        research_interests:
          - 自动驾驶
          - 具身智能
          - 强化学习
          - VLM (Vision Language Models)
          - VLA (Vision Language Action Models)
          - 大语言模型
          - 世界模型

        research_prompt: |
          我最近关注自动驾驶和具身智能领域，特别是以下几个方向：

          1. 端到端自动驾驶系统，尤其是使用视觉语言模型(VLM)和世界模型进行决策的方法
          2. 具身智能中的Vision-Language-Action (VLA)模型，能够将视觉输入和语言指令转化为机器人动作
          3. 强化学习在自动驾驶场景中的应用，包括离线强化学习、模仿学习等
          4. 大语言模型在机器人任务规划和推理中的应用
          5. 除了上述以外，我还关注一些尚未在自动驾驶和具身智能中广泛应用但已经在VLM、强化学习、大语言模型的其他应用场景中取得突破性进展的方法，且有望迁移到自动驾驶和具身智能领域。

          我对理论创新和实际应用都感兴趣，尤其关注能够在真实世界部署的方法。

        # ============================================================
        # 2. 数据源配置
        # ============================================================
        sources:
          arxiv:
            enabled: true
            categories:
              - cs.RO  # Robotics
              - cs.CV  # Computer Vision
              - cs.AI  # Artificial Intelligence
              - cs.LG  # Machine Learning
              - cs.CL  # Computation and Language
            max_results: 50
            days_back: ${{ github.event.inputs.days_back || 1 }}

          journals:
            enabled: true
            days_back: 3
            selected_journals:
              - Nature
              - Science
              - Nature Machine Intelligence
              - Science Robotics
              - Nature Communications

          twitter:
            enabled: ${TWITTER_ENABLED}
            days_back: 7
            tweets_per_user: 2
            following_usernames:
              - karpathy
              - OpenAI
              - ylecun
              - DeepMind
              - chelseabfinn
              - danijarh
              - _akhaliq
              - hardmaru
              - svlevine
              - NVIDIAAI

        # ============================================================
        # 3. OpenAI API 配置
        # ============================================================
        base_url: ${API_BASE_URL}
        api_key: ${OPENAI_API_KEY}
        model: ${MODEL_NAME}
        max_tokens: 4096

        # ============================================================
        # 4. 筛选与性能配置
        # ============================================================
        min_relevance: ${{ github.event.inputs.min_relevance || 'medium' }}
        max_concurrent: ${{ github.event.inputs.max_concurrent || 5 }}
        batch_size: 15
        detail_batch_size: 5

        # ============================================================
        # 5. 输出与通知配置
        # ============================================================
        output_dir: reports

        email:
          enabled: true
          smtp_server: ${EMAIL_SMTP_SERVER}
          smtp_port: ${EMAIL_SMTP_PORT}
          use_ssl: true
          sender_email: ${EMAIL_SENDER}
          sender_password: ${EMAIL_PASSWORD}
          receiver_email: ${EMAIL_RECEIVER}
          subject_prefix: "[ArXiv每日论文]"
        CONFIGEOF

        # 替换环境变量
        envsubst < config.yaml > config.tmp && mv config.tmp config.yaml
      env:
        API_BASE_URL: ${{ secrets.API_BASE_URL || 'https://api.openai.com/v1' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        MODEL_NAME: ${{ secrets.MODEL_NAME || 'gpt-4o' }}
        EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER || 'smtp.163.com' }}
        EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT || '465' }}
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        TWITTER_ENABLED: ${{ secrets.TWITTER_ENABLED || 'false' }}

    - name: Run ArXiv Agent
      run: |
        python main.py
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: arxiv-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30

    - name: Commit and push reports (optional)
      if: success()
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add reports/
        git diff --quiet && git diff --staged --quiet || (git commit -m "Daily report: $(date +'%Y-%m-%d')" && git push)
      continue-on-error: true
